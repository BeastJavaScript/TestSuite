// Generated by CoffeeScript 1.7.1
(function() {
  var ArrayTest, ObjectTest, Person, TestCase, ts,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ts = require("../bin/beast.testsuite.js");

  TestCase = ts.TestCase;

  new (ArrayTest = (function(_super) {
    __extends(ArrayTest, _super);

    function ArrayTest() {
      ArrayTest.__super__.constructor.call(this);
    }

    ArrayTest.prototype.base = function() {
      var ar1, ar2;
      ar1 = [1, [1, 2, 3], 3];
      ar2 = [1, [1, 2, 3], 3];
      return [ar1, ar2];
    };

    ArrayTest.prototype.testEquals = function(one, two) {
      this.assertEquals(one, two);
      return this.assertEquals(new slkdfsldfkj, two);
    };

    ArrayTest.prototype.testObject = function(one, two) {
      return this.assertObjectEquals(one, two);
    };

    return ArrayTest;

  })(TestCase));

  Person = (function() {
    function Person(name, age) {
      this.name = name;
      this.age = age;
    }

    return Person;

  })();

  new (ObjectTest = (function(_super) {
    __extends(ObjectTest, _super);

    function ObjectTest() {
      ObjectTest.__super__.constructor.call(this);
    }

    ObjectTest.prototype.base = function() {
      return [new Person("tom", 25), new Person("tom", 25)];
    };

    ObjectTest.prototype.testObject = function(p1, p2) {
      this.assertEquals(p1, p2);
      p2.age = 26;
      return this.assertEquals(p1, p2);
    };

    return ObjectTest;

  })(TestCase));

  console.log(ts.TestCase.getResult());

}).call(this);
